import os
import re
import hashlib
from datetime import datetime
from flask import current_app, url_for
from werkzeug.utils import secure_filename
import requests

def allowed_file(filename, allowed_extensions):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞"""
    if not filename:
        return False
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in allowed_extensions

def save_uploaded_file(file, upload_type='general'):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    if not file or file.filename == '':
        return None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    folders = {
        'avatar': 'avatars',
        'resume': 'resumes', 
        'company_doc': 'company_docs',
        'vacancy_image': 'vacancy_images',
        'general': 'general'
    }
    
    folder = folders.get(upload_type, 'general')
    upload_path = os.path.join(current_app.config['UPLOAD_FOLDER'], folder)
    os.makedirs(upload_path, exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    filename = secure_filename(file.filename)
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    name, ext = os.path.splitext(filename)
    new_filename = f"{timestamp}_{name[:50]}{ext}"
    
    file_path = os.path.join(upload_path, new_filename)
    file.save(file_path)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ë–î
    return f"{folder}/{new_filename}"

def generate_file_hash(file_content):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–µ—à–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    return hashlib.md5(file_content).hexdigest()

def format_salary(salary_from, salary_to, currency='KZT'):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    currency_symbols = {
        'KZT': '‚Ç∏',
        'USD': '$',
        'EUR': '‚Ç¨'
    }
    
    symbol = currency_symbols.get(currency, currency)
    
    if salary_from and salary_to:
        if salary_from == salary_to:
            return f"{salary_from:,} {symbol}".replace(',', ' ')
        else:
            return f"{salary_from:,} - {salary_to:,} {symbol}".replace(',', ' ')
    elif salary_from:
        return f"–æ—Ç {salary_from:,} {symbol}".replace(',', ' ')
    elif salary_to:
        return f"–¥–æ {salary_to:,} {symbol}".replace(',', ' ')
    else:
        return "–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"

def validate_phone(phone):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)"""
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    clean_phone = re.sub(r'[^\d+]', '', phone)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
    patterns = [
        r'^\+7[0-9]{10}$',  # +7XXXXXXXXXX
        r'^7[0-9]{10}$',    # 7XXXXXXXXXX
        r'^8[0-9]{10}$',    # 8XXXXXXXXXX
    ]
    
    for pattern in patterns:
        if re.match(pattern, clean_phone):
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É +7XXXXXXXXXX
            if clean_phone.startswith('8'):
                return '+7' + clean_phone[1:]
            elif clean_phone.startswith('7'):
                return '+' + clean_phone
            else:
                return clean_phone
    
    return None

def validate_email(email):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email –∞–¥—Ä–µ—Å–∞"""
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email) is not None

def validate_iin(iin):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ò–ù (–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞)"""
    if not iin or len(iin) != 12:
        return False
    
    if not iin.isdigit():
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞
    weights1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
    weights2 = [3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 2]
    
    def calculate_checksum(digits, weights):
        return sum(int(d) * w for d, w in zip(digits[:11], weights)) % 11
    
    checksum1 = calculate_checksum(iin, weights1)
    
    if checksum1 < 10:
        return int(iin[11]) == checksum1
    else:
        checksum2 = calculate_checksum(iin, weights2)
        if checksum2 < 10:
            return int(iin[11]) == checksum2
        else:
            return int(iin[11]) == 0

def validate_bin(bin_number):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ë–ò–ù (–ë–∏–∑–Ω–µ—Å-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä)"""
    if not bin_number or len(bin_number) != 12:
        return False
    
    if not bin_number.isdigit():
        return False
    
    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–ò–ù (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º —Å–ª–æ–∂–Ω–µ–µ)
    return True

def send_notification(user_id=None, employer_id=None, title='', message='', 
                     notification_type='system', related_vacancy_id=None, 
                     related_application_id=None, send_email=False, send_sms=False, 
                     send_telegram=False):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        from db_models import Notification, db
        
        notification = Notification(
            user_id=user_id,
            employer_id=employer_id,
            title=title,
            message=message,
            notification_type=notification_type,
            related_vacancy_id=related_vacancy_id,
            related_application_id=related_application_id
        )
        
        db.session.add(notification)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º
        if send_email:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email
            notification.sent_email = True
            
        if send_sms:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É SMS
            notification.sent_sms = True
            
        if send_telegram:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram
            notification.sent_telegram = True
        
        db.session.commit()
        return True
        
    except Exception as e:
        if current_app:
            current_app.logger.error(f"Error sending notification: {str(e)}")
        db.session.rollback()
        return False

def send_email(to_email, subject, template, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        from flask_mail import Message
        from extensions import mail
        
        msg = Message(
            subject=subject,
            recipients=[to_email],
            sender=current_app.config['MAIL_DEFAULT_SENDER']
        )
        
        # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ HTML —à–∞–±–ª–æ–Ω–∞
        from flask import render_template
        msg.html = render_template(f'emails/{template}.html', **kwargs)
        
        mail.send(msg)
        return True
        
    except Exception as e:
        current_app.logger.error(f"Error sending email: {str(e)}")
        return False

def send_sms(phone, message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    try:
        api_url = current_app.config.get('SMS_API_URL')
        api_key = current_app.config.get('SMS_API_KEY')
        sender = current_app.config.get('SMS_SENDER', 'WorkPlus')
        
        if not api_url or not api_key:
            current_app.logger.warning("SMS API not configured")
            return False
        
        # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ (–Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞)
        data = {
            'api_key': api_key,
            'from': sender,
            'to': phone,
            'text': message
        }
        
        response = requests.post(api_url, data=data, timeout=10)
        return response.status_code == 200
        
    except Exception as e:
        current_app.logger.error(f"Error sending SMS: {str(e)}")
        return False

def send_telegram_message(chat_id, message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    try:
        bot_token = current_app.config.get('TELEGRAM_BOT_TOKEN')
        
        if not bot_token:
            return False
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        response = requests.post(url, data=data, timeout=10)
        return response.status_code == 200
        
    except Exception as e:
        current_app.logger.error(f"Error sending Telegram message: {str(e)}")
        return False

def create_social_media_post(vacancy):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö"""
    try:
        from db_models import SocialMediaPost, db
        from config import Constants
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        post_text = f"""
üî• –í–ê–ö–ê–ù–°–ò–Ø: {vacancy.title}

üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {format_salary(vacancy.salary_from, vacancy.salary_to)}
üìç –ì–æ—Ä–æ–¥: {vacancy.city}
üíº –ó–∞–Ω—è—Ç–æ—Å—Ç—å: {dict(Constants.EMPLOYMENT_TYPES).get(vacancy.employment_type, vacancy.employment_type)}

{vacancy.description[:200]}{'...' if len(vacancy.description) > 200 else ''}

–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–∫–ª–∏–∫: {url_for('public.vacancy_detail', vacancy_id=vacancy.id, _external=True)}

#—Ä–∞–±–æ—Ç–∞ #–≤–∞–∫–∞–Ω—Å–∏—è #{vacancy.city.lower()} #workplus
        """.strip()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ —Ä–∞–∑–Ω—ã–µ —Å–æ—Ü—Å–µ—Ç–∏
        platforms = ['instagram', 'telegram', 'tiktok']
        
        for platform in platforms:
            social_post = SocialMediaPost(
                vacancy_id=vacancy.id,
                platform=platform,
                caption=post_text,
                hashtags=f"#—Ä–∞–±–æ—Ç–∞ #–≤–∞–∫–∞–Ω—Å–∏—è #{vacancy.city.lower()} #workplus"
            )
            db.session.add(social_post)
        
        db.session.commit()
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ API —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
        
        return True
        
    except Exception as e:
        if current_app:
            current_app.logger.error(f"Error creating social media post: {str(e)}")
        db.session.rollback()
        return False

def track_event(event_type, user_id=None, employer_id=None, vacancy_id=None, metadata=None):
    """–¢—Ä–µ–∫–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        from flask import request
        from db_models import AnalyticsEvent, db
        
        event = AnalyticsEvent(
            event_type=event_type,
            user_id=user_id,
            employer_id=employer_id,
            vacancy_id=vacancy_id,
            event_data=str(metadata) if metadata else None,  # –ò–∑–º–µ–Ω–∏–ª–∏ metadata –Ω–∞ event_data
            ip_address=request.remote_addr if request else None,
            user_agent=request.user_agent.string if request else None,
            referrer=request.referrer if request else None
        )
        
        db.session.add(event)
        db.session.commit()
        
    except Exception as e:
        if current_app:
            current_app.logger.error(f"Error tracking event: {str(e)}")
        db.session.rollback()

def calculate_matching_score(vacancy, user):
    """–†–∞—Å—á–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    score = 0
    
    # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–æ–¥—É (25 –±–∞–ª–ª–æ–≤)
    if vacancy.city.lower() == user.city.lower():
        score += 25
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—ã—Ç–∞ (30 –±–∞–ª–ª–æ–≤)
    if user.experience_years >= vacancy.experience_required:
        if user.experience_years == vacancy.experience_required:
            score += 30
        elif user.experience_years <= vacancy.experience_required + 2:
            score += 25
        else:
            score += 20
    elif user.experience_years >= vacancy.experience_required - 1:
        score += 15
    
    # –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ (35 –±–∞–ª–ª–æ–≤)
    if vacancy.required_skills and user.skills:
        vacancy_skill_ids = {vs.skill_id for vs in vacancy.required_skills}
        user_skill_ids = {us.skill_id for us in user.skills}
        
        if vacancy_skill_ids:
            matching_skills = len(vacancy_skill_ids & user_skill_ids)
            skill_percentage = matching_skills / len(vacancy_skill_ids)
            score += min(35, int(skill_percentage * 35))
    
    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã–º –æ–∂–∏–¥–∞–Ω–∏—è–º (10 –±–∞–ª–ª–æ–≤)
    if (vacancy.salary_from and user.desired_salary_from and 
        vacancy.salary_from >= user.desired_salary_from * 0.8):
        score += 10
    elif vacancy.salary_to and user.desired_salary_to and vacancy.salary_to <= user.desired_salary_to * 1.2:
        score += 5
    
    return min(100, score)

def generate_vacancy_slug(title):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
    import unicodedata
    
    # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    translit_map = {
        '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
        '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
        '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
        '—Ñ': 'f', '—Ö': 'h', '—Ü': 'c', '—á': 'ch', '—à': 'sh', '—â': 'sch',
        '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
    }
    
    slug = title.lower()
    
    # –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è
    for cyrillic, latin in translit_map.items():
        slug = slug.replace(cyrillic, latin)
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –¥–µ—Ñ–∏—Å–æ–≤
    slug = re.sub(r'[^a-z0-9-]', '-', slug)
    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã
    slug = re.sub(r'-+', '-', slug)
    # –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    slug = slug.strip('-')
    
    return slug[:100]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É

def format_relative_time(dt):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    if not dt:
        return ''
    
    now = datetime.now()
    diff = now - dt
    
    if diff.days > 30:
        return dt.strftime('%d.%m.%Y')
    elif diff.days > 0:
        return f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
    elif diff.seconds > 3600:
        hours = diff.seconds // 3600
        return f"{hours} —á. –Ω–∞–∑–∞–¥"
    elif diff.seconds > 60:
        minutes = diff.seconds // 60
        return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
    else:
        return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"

def generate_api_key():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è API –∫–ª—é—á–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤"""
    import secrets
    return secrets.token_urlsafe(32)

def sanitize_html(text):
    """–û—á–∏—Å—Ç–∫–∞ HTML –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Ç–µ–≥–æ–≤"""
    import bleach
    
    allowed_tags = ['p', 'br', 'strong', 'em', 'u', 'ul', 'ol', 'li']
    allowed_attributes = {}
    
    return bleach.clean(text, tags=allowed_tags, attributes=allowed_attributes)

def compress_image(image_path, max_size=(800, 600), quality=85):
    """–°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        from PIL import Image
        
        with Image.open(image_path) as img:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if img.mode in ('RGBA', 'P'):
                img = img.convert('RGB')
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
            img.thumbnail(max_size, Image.Resampling.LANCZOS)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
            img.save(image_path, 'JPEG', quality=quality, optimize=True)
            
        return True
        
    except Exception as e:
        current_app.logger.error(f"Error compressing image: {str(e)}")
        return False

def get_user_location_from_ip(ip_address):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ IP"""
    try:
        # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return {'city': '–ê–ª–º–∞—Ç—ã', 'region': '–ê–ª–º–∞—Ç—ã', 'country': 'KZ'}
        
    except Exception:
        return {'city': '–ê–ª–º–∞—Ç—ã', 'region': '–ê–ª–º–∞—Ç—ã', 'country': 'KZ'}

def paginate_query(query, page=1, per_page=20):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
    return query.paginate(
        page=page,
        per_page=per_page,
        error_out=False,
        max_per_page=100
    )

def create_search_filters(request_args):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞"""
    filters = {}
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
    if request_args.get('q'):
        filters['query'] = request_args.get('q').strip()
    
    # –ì–æ—Ä–æ–¥
    if request_args.get('city'):
        filters['city'] = request_args.get('city')
    
    # –ó–∞—Ä–ø–ª–∞—Ç–∞
    if request_args.get('salary_from'):
        try:
            filters['salary_from'] = int(request_args.get('salary_from'))
        except (ValueError, TypeError):
            pass
    
    if request_args.get('salary_to'):
        try:
            filters['salary_to'] = int(request_args.get('salary_to'))
        except (ValueError, TypeError):
            pass
    
    # –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
    if request_args.get('experience'):
        try:
            filters['experience'] = int(request_args.get('experience'))
        except (ValueError, TypeError):
            pass
    
    # –¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    if request_args.get('employment_type'):
        filters['employment_type'] = request_args.get('employment_type')
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    if request_args.get('category'):
        try:
            filters['category_id'] = int(request_args.get('category'))
        except (ValueError, TypeError):
            pass
    
    # –ù–∞–≤—ã–∫–∏
    if request_args.getlist('skills'):
        try:
            filters['skill_ids'] = [int(s) for s in request_args.getlist('skills') if s.isdigit()]
        except (ValueError, TypeError):
            pass
    
    # –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    if request_args.get('remote_work'):
        filters['remote_work'] = request_args.get('remote_work').lower() == 'true'
    
    return filters

def build_breadcrumbs(path_items):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    breadcrumbs = [{'name': '–ì–ª–∞–≤–Ω–∞—è', 'url': url_for('index')}]
    
    for item in path_items:
        breadcrumbs.append({
            'name': item.get('name', ''),
            'url': item.get('url', '#')
        })
    
    return breadcrumbs