from flask import Flask, jsonify, request
from flask_cors import CORS
from flask_migrate import Migrate
from flask_jwt_extended import JWTManager
from config import Config
from models import db, User, Job, Company, JobApplication
from seed_data import seed_all
from flask_jwt_extended.exceptions import JWTExtendedException
from werkzeug.exceptions import HTTPException

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
migrate = Migrate()
jwt = JWTManager()

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)
    CORS(
        app,
        supports_credentials=True,
        origins=["http://localhost:3000", "https://workplus-fork.vercel.app"]
        )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    db.init_app(app)
    migrate.init_app(app, db)
    jwt.init_app(app)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è blueprints
    from routes import (
        auth_bp,
        jobs_bp,
        employer_bp,
        companies_bp,
        notifications_bp,
        profile_bp,
        contact_bp,
        resume_bp, 
        admin_users_bp,
        admin_user_list_bp,
        admin_employer_bp,
        user_profile_bp
    )



    app.register_blueprint(auth_bp, url_prefix='/api/auth')
    app.register_blueprint(jobs_bp, url_prefix='/api/jobs')
    app.register_blueprint(employer_bp, url_prefix='/api/employer')
    app.register_blueprint(companies_bp, url_prefix='/api/companies')
    app.register_blueprint(notifications_bp, url_prefix='/api/notifications')
    app.register_blueprint(profile_bp, url_prefix='/api/profile')
    app.register_blueprint(contact_bp, url_prefix='/api/contact')
    app.register_blueprint(resume_bp, url_prefix='/api/resumes')
    app.register_blueprint(admin_users_bp, url_prefix='/api/admin')
    app.register_blueprint(admin_user_list_bp, url_prefix='/api/admin/user_list')
    app.register_blueprint(admin_employer_bp, url_prefix="/api/admin/employers")
    app.register_blueprint(user_profile_bp, url_prefix="/api/admin/user_profile")

    # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API
    @app.route('/api')
    def api_info():
        return jsonify({
            'message': 'WorkPlus.kz API',
            'version': '1.0.0',
            'description': 'HR-—ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ —Å –º—É–ª—å—Ç–∏–∫–∞–Ω–∞–ª—å–Ω–æ–π –¥–∏—Å—Ç—Ä–∏–±—É—Ü–∏–µ–π –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞',
            'endpoints': {
                'auth': '/api/auth',
                'jobs': '/api/jobs',
            },
            'features': [
                '–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π',
                '–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã',
                '–ú—É–ª—å—Ç–∏–∫–∞–Ω–∞–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è',
                '–°–∫–æ—Ä–∏–Ω–≥ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤',
                '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
                '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è'
            ]
        })

    return app


app = create_app()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.errorhandler(422)
def handle_unprocessable_entity(err):
    return jsonify({'error': 'Validation error', 'message': str(err)}), 422

@app.errorhandler(JWTExtendedException)
def handle_jwt_error(e):
    return jsonify({'error': 'JWT Error', 'message': str(e)}), 401

@app.errorhandler(HTTPException)
def handle_http_exception(e):
    return jsonify({'error': e.code, 'message': e.description}), e.code

@jwt.expired_token_loader
def expired_token_callback(jwt_header, jwt_payload):
    return jsonify({'error': '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫'}), 401

@jwt.invalid_token_loader
def invalid_token_callback(error):
    return jsonify({'error': '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω'}), 401

@jwt.unauthorized_loader
def missing_token_callback(error):
    return jsonify({'error': '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}), 401

# CLI –∫–æ–º–∞–Ω–¥—ã
@app.cli.command()
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    db.create_all()
    seed_all()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")

@app.cli.command()
def create_admin():
    """–°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    email = input("Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ")
    password = input("–ü–∞—Ä–æ–ª—å: ")
    name = input("–ò–º—è: ")


    if User.query.filter_by(email=email).first():
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return

    admin = User(name=name, email=email, user_type='admin')
    admin.set_password(password)

    db.session.add(admin)
    db.session.commit()

    print(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {email} —Å–æ–∑–¥–∞–Ω")

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
        seed_all()
    app.run(debug=True, host="0.0.0.0", port=5000)